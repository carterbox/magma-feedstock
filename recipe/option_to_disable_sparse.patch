diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2051a6d..553448e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -41,6 +41,7 @@ endif()
 # ----------------------------------------
 # prefer shared libraries
 option( BUILD_SHARED_LIBS "If on, build shared libraries, otherwise build static libraries" ON )
+option( BUILD_SPARSE "If on, build magma sparse" ON )
 
 # prefer /usr/local/magma, instead of /usr/local.
 if (UNIX AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
@@ -518,10 +519,13 @@ target_link_libraries( tester
 # compile MAGMA sparse library
 
 # sparse doesn't have Fortran at the moment, so no need for above shenanigans
+if (BUILD_SPARSE)
 include_directories( sparse/include )
 include_directories( sparse/control )
+endif ()
 include_directories( testing )
-cuda_add_library( magma_sparse ${libsparse_all} )
+if (BUILD_SPARSE)
+cuda_add_library( magma_sparse ${libsparse_all} EXCLUDE_FROM_ALL)
 target_link_libraries( magma_sparse
     magma
     ${blas_fix}
@@ -531,7 +535,7 @@ target_link_libraries( magma_sparse
     ${CUDA_cusparse_LIBRARY}
 )
 add_custom_target( sparse-lib DEPENDS magma_sparse )
-
+endif()
 
 # ----------------------------------------
 # compile each tester
@@ -561,6 +565,7 @@ add_custom_target( testing DEPENDS ${testing} )
 
 # ----------------------------------------
 # compile each sparse tester
+if (BUILD_SPARSE)
 set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
 foreach( TEST ${sparse_testing_all} )
     string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
@@ -571,15 +576,22 @@ foreach( TEST ${sparse_testing_all} )
     list( APPEND sparse-testing ${EXE} )
 endforeach()
 add_custom_target( sparse-testing DEPENDS ${sparse-testing} )
-
+endif()
 
 # ----------------------------------------
 # what to install
-install( TARGETS magma magma_sparse ${blas_fix}
+install( TARGETS magma ${blas_fix}
+         RUNTIME DESTINATION bin
+         LIBRARY DESTINATION lib
+         ARCHIVE DESTINATION lib )
+file( GLOB headers include/*.h )
+if (BUILD_SPARSE)
+install( TARGETS magma_sparse
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib )
 file( GLOB headers include/*.h sparse/include/*.h )
+endif()
 if (USE_FORTRAN)
     install( FILES ${headers} ${modules}
              DESTINATION include )
